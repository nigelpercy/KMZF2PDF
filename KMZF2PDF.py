from fpdf import FPDF
from PIL import Image
import sys

# Dump of the MZ-80K CGROM in ASCII order
frombytes = bytes([
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0xFF, 0xF7, 0xF7, 0xF7, 0xD5, 0xE3, 0xF7, 0xFF,0xFF, 0xF7, 0xE3, 0xD5, 0xF7, 0xF7, 0xF7, 0xFF,
0xFF, 0xFF, 0xF7, 0xFB, 0x81, 0xFB, 0xF7, 0xFF,0xFF, 0xFF, 0xEF, 0xDF, 0x81, 0xDF, 0xEF, 0xFF,0xBD, 0xBD, 0xBD, 0x81, 0xBD, 0xBD, 0xBD, 0xFF,
0xE3, 0xDD, 0xBF, 0xBF, 0xBF, 0xDD, 0xE3, 0xFF,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00, 0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0x7E, 0x24, 0x7E, 0x24, 0x24, 0x00,
0x08, 0x1E, 0x28, 0x1C, 0x0A, 0x1C, 0x08, 0x00, 0x00, 0x62, 0x64, 0x08, 0x10, 0x26, 0x46, 0x00, 0x30, 0x48, 0x48, 0x30, 0x4A, 0x44, 0x3A, 0x00,
0x04, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x10, 0x10, 0x10, 0x08, 0x04, 0x00, 0x20, 0x10, 0x08, 0x08, 0x08, 0x10, 0x20, 0x00,
0x08, 0x2A, 0x1C, 0x3E, 0x1C, 0x2A, 0x08, 0x00, 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10,
0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00,
0x3C, 0x42, 0x46, 0x5A, 0x62, 0x42, 0x3C, 0x00, 0x08, 0x18, 0x28, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x3C, 0x42, 0x02, 0x0C, 0x30, 0x40, 0x7E, 0x00,
0x3C, 0x42, 0x02, 0x3C, 0x02, 0x42, 0x3C, 0x00, 0x04, 0x0C, 0x14, 0x24, 0x7E, 0x04, 0x04, 0x00, 0x7E, 0x40, 0x78, 0x04, 0x02, 0x44, 0x38, 0x00,
0x1C, 0x20, 0x40, 0x7C, 0x42, 0x42, 0x3C, 0x00, 0x7E, 0x42, 0x04, 0x08, 0x10, 0x10, 0x10, 0x00, 0x3C, 0x42, 0x42, 0x3C, 0x42, 0x42, 0x3C, 0x00,
0x3C, 0x42, 0x42, 0x3E, 0x02, 0x04, 0x38, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x10,
0x0E, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0E, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x70, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x70, 0x00,
0x3C, 0x42, 0x02, 0x0C, 0x10, 0x00, 0x10, 0x00, 0x1C, 0x22, 0x4A, 0x56, 0x4C, 0x20, 0x1E, 0x00, 0x18, 0x24, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00,
0x7C, 0x22, 0x22, 0x3C, 0x22, 0x22, 0x7C, 0x00, 0x1C, 0x22, 0x40, 0x40, 0x40, 0x22, 0x1C, 0x00, 0x78, 0x24, 0x22, 0x22, 0x22, 0x24, 0x78, 0x00, 
0x7E, 0x40, 0x40, 0x78, 0x40, 0x40, 0x7E, 0x00, 0x7E, 0x40, 0x40, 0x78, 0x40, 0x40, 0x40, 0x00, 0x1C, 0x22, 0x40, 0x4E, 0x42, 0x22, 0x1C, 0x00,
0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00, 0x1C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00, 0x0E, 0x04, 0x04, 0x04, 0x04, 0x44, 0x38, 0x00, 
0x42, 0x44, 0x48, 0x70, 0x48, 0x44, 0x42, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7E, 0x00, 0x42, 0x66, 0x5A, 0x5A, 0x42, 0x42, 0x42, 0x00,
0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x42, 0x00, 0x18, 0x24, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00, 0x7C, 0x42, 0x42, 0x7C, 0x40, 0x40, 0x40, 0x00, 
0x18, 0x24, 0x42, 0x42, 0x4A, 0x24, 0x1A, 0x00, 0x7C, 0x42, 0x42, 0x7C, 0x48, 0x44, 0x42, 0x00, 0x3C, 0x42, 0x40, 0x3C, 0x02, 0x42, 0x3C, 0x00,
0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x42, 0x42, 0x42, 0x24, 0x24, 0x18, 0x18, 0x00, 
0x42, 0x42, 0x42, 0x5A, 0x5A, 0x66, 0x42, 0x00, 0x42, 0x42, 0x24, 0x18, 0x24, 0x42, 0x42, 0x00, 0x22, 0x22, 0x22, 0x1C, 0x08, 0x08, 0x08, 0x00,
0x7E, 0x02, 0x04, 0x18, 0x20, 0x40, 0x7E, 0x00, 0x3C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3C, 0x00, 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00,
0x3C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x3C, 0x00, 0x00, 0x08, 0x1C, 0x2A, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x10, 0x20, 0x7F, 0x20, 0x10, 0x00,
0x18, 0x24, 0x7E, 0xFF, 0x5A, 0x24, 0x00, 0x00, 0xE0, 0x47, 0x42, 0x7E, 0x42, 0x47, 0xE0, 0x00, 0x22, 0x3E, 0x2A, 0x08, 0x08, 0x49, 0x7F, 0x41,
0x1C, 0x1C, 0x08, 0x3E, 0x08, 0x08, 0x14, 0x22, 0x00, 0x11, 0xD2, 0xFC, 0xD2, 0x11, 0x00, 0x00, 0x00, 0x88, 0x4B, 0x3F, 0x4B, 0x88, 0x00, 0x00,
0x22, 0x14, 0x08, 0x08, 0x3E, 0x08, 0x1C, 0x1C, 0x3C, 0x7E, 0xFF, 0xDB, 0xFF, 0x67, 0x7E, 0x3C, 0x3C, 0x42, 0x81, 0xA5, 0x81, 0x99, 0x42, 0x3C,
0x00, 0xC0, 0xC8, 0x54, 0x54, 0x55, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0x0A, 0x05, 0x0A, 0x05, 0x0A, 0x05, 0x0A, 0x05,
0xA0, 0x50, 0xA0, 0x50, 0xA0, 0x50, 0xA0, 0x50, 0xAA, 0x55, 0xAA, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x55, 0xAA, 0x55,
0xAA, 0x54, 0xA8, 0x50, 0xA0, 0x40, 0x80, 0x00, 0xAA, 0x55, 0x2A, 0x15, 0x0A, 0x05, 0x02, 0x01, 0x80, 0x40, 0xA0, 0x50, 0xA8, 0x54, 0xAA, 0x55,
0x00, 0x01, 0x02, 0x05, 0x0A, 0x15, 0x2A, 0x55, 0x80, 0x80, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x01, 0x01,
0x38, 0x28, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x2A, 0x54, 0x2A, 0x54, 0x2A, 0x00, 0x01, 0x01, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08,
0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x80, 0x80, 0x1C, 0x1C, 0x3E, 0x1C, 0x08, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x08, 0x08, 0x08, 0x08, 0xFF, 0x08, 0x08, 0x08, 0x03, 0x1C, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x18, 0x20, 0x20, 0x40, 0x40, 0x80,
0x80, 0x40, 0x40, 0x20, 0x20, 0x18, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x1C, 0x03, 0x80, 0x80, 0x40, 0x40, 0x40, 0x20, 0x20, 0x10,
0xC0, 0x38, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x18, 0x04, 0x04, 0x02, 0x02, 0x01, 0x01, 0x02, 0x02, 0x04, 0x04, 0x18, 0x60, 0x80,
0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x38, 0xC0, 0x24, 0x24, 0x24, 0x24, 0xC3, 0x81, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08,
0x08, 0x04, 0x04, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00,
0x00, 0x3C, 0x7A, 0xA9, 0xA9, 0x7A, 0x3C, 0x00, 0x44, 0xFF, 0x44, 0x44, 0x44, 0xFF, 0x44, 0x44, 0x00, 0x00, 0x3C, 0x42, 0x7E, 0x40, 0x3C, 0x00,
0x22, 0x44, 0x88, 0x11, 0x22, 0x44, 0x88, 0x11, 0x88, 0x44, 0x22, 0x11, 0x88, 0x44, 0x22, 0x11, 0xAA, 0x44, 0xAA, 0x11, 0xAA, 0x44, 0xAA, 0x11,
0x10, 0x10, 0x7C, 0x10, 0x10, 0x12, 0x0C, 0x00, 0x00, 0x00, 0x3A, 0x46, 0x46, 0x3A, 0x02, 0x3C, 0x40, 0x40, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x00,
0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x40, 0x40, 0x5C, 0x62, 0x42, 0x62, 0x5C, 0x00, 0x00, 0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00,
0x02, 0x02, 0x3A, 0x46, 0x42, 0x46, 0x3A, 0x00, 0x00, 0x00, 0x5C, 0x62, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x5C, 0x62, 0x62, 0x5C, 0x40, 0x40,
0x00, 0x00, 0x3C, 0x42, 0x40, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x3A, 0x46, 0x46, 0x3A, 0x02, 0x02, 0x00, 0x00, 0x38, 0x04, 0x3C, 0x44, 0x3A, 0x00,
0x00, 0x00, 0x7E, 0x04, 0x18, 0x20, 0x7E, 0x00, 0x00, 0x00, 0x41, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x3C, 0x02, 0x7C, 0x00,
0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x08, 0x00, 0x18, 0x08, 0x08, 0x08, 0x1C, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x42, 0x18, 0x24, 0x42, 0x42, 0x24, 0x18, 0x00, 0x40, 0x40, 0x44, 0x48, 0x50, 0x68, 0x44, 0x00, 0x0C, 0x12, 0x10, 0x7C, 0x10, 0x10, 0x10, 0x00,
0x00, 0x00, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x00, 0x22, 0x00, 0x22, 0x22, 0x22, 0x1C, 0x00,
0x38, 0x44, 0x44, 0x4A, 0x42, 0x52, 0x4C, 0x00, 0x04, 0x00, 0x0C, 0x04, 0x04, 0x04, 0x44, 0x38, 0x00, 0x00, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x00,
0x10, 0x20, 0x20, 0x40, 0x40, 0x40, 0x80, 0x80, 0x42, 0x00, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x00, 0x76, 0x49, 0x49, 0x49, 0x49, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0x0C, 0x30, 0xC0, 0x03, 0x0C, 0x30, 0xC0, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x30, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C, 0x00, 0x42, 0x18, 0x24, 0x42, 0x7E, 0x42, 0x42, 0x00,
0x00, 0x22, 0x00, 0x1C, 0x22, 0x22, 0x1C, 0x00, 0x24, 0x00, 0x38, 0x04, 0x3C, 0x44, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x30, 0x0C, 0x03,
0x00, 0x00, 0x42, 0x42, 0x46, 0x3A, 0x02, 0x3C, 0x22, 0x14, 0x3E, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
0x00, 0x00, 0x04, 0x02, 0x7F, 0x02, 0x04, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x08, 0x08, 0x08,
0xFF, 0xC3, 0x81, 0x81, 0x81, 0x81, 0xC3, 0xFF, 0x08, 0x08, 0x08, 0x08, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x08, 0x08, 0x08,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFF, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xF8, 0x08, 0x08, 0x08, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF,
0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x20, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0xF8, 0x00, 0x00, 0x00,
0x0F, 0x0F, 0x0F, 0x0F, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0x0F, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
0x08, 0x1C, 0x3E, 0x7F, 0x7F, 0x1C, 0x3E, 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF,
0x08, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x20, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,
0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x3C, 0x7E, 0x7E, 0x7E, 0x7E, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
0x36, 0x7F, 0x7F, 0x7F, 0x3E, 0x1C, 0x08, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF,
0x81, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x81, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x08, 0x1C, 0x2A, 0x7F, 0x2A, 0x08, 0x08, 0x00,
0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x08, 0x1C, 0x3E, 0x7F, 0x3E, 0x1C, 0x08, 0x00, 0x0C, 0x12, 0x10, 0x38, 0x10, 0x10, 0x3E, 0x00,
0x00, 0x08, 0x08, 0x08, 0x2A, 0x1C, 0x08, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0xFF, 0x7F, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01,
0x00, 0x00, 0x01, 0x3E, 0x54, 0x14, 0x14, 0x00,
])

columnSpacing = 3.10
rowSpacing = 4 
lineWrapIndent = 12.3
startRow = 5
startCol = 5
maximumRows = 290 ## Seems to be OK for A4


def PrintKeyWord(keyword,p_colNumber,p_rowNumber):
  for x in range(0, len(keyword)):
    PrintCharacter(ord(keyword[x]),p_colNumber,p_rowNumber)
    p_colNumber = colNumber

def PrintCharacter(character,p_colNumber,p_rowNumber):
  global colNumber
  singlechar = ([frombytes[(character * 8) + 0]
                ,frombytes[(character * 8) + 1]
                ,frombytes[(character * 8) + 2]
                ,frombytes[(character * 8) + 3]
                ,frombytes[(character * 8) + 4]
                ,frombytes[(character * 8) + 5]
                ,frombytes[(character * 8) + 6]
                ,frombytes[(character * 8) + 7]]) ## Load the bitmaps for the specified ASCII char

  for x in range(0, 8):
    singlechar[x] ^= 0xFF ## Invert the bitmap so it is black on white
  pdf.image(Image.frombytes('1', (8, 8), bytes(singlechar)),p_colNumber,p_rowNumber) 
  colNumber = p_colNumber + columnSpacing

#file_handler = open(sys.argv[0], 'rb')
#file_handler = open('C:\\Install\\SharpMZ-80K\\Library\\ExportedMZF\\THE JAM.mzf', 'rb')
#file_handler = open('C:\\Install\\SharpMZ-80K\\Library\\ExportedMZF\\RHINO.mzf', 'rb')
#file_handler = open('C:\\Install\\SharpMZ-80K\\Library\\ExportedMZF\\MONEY TABLE.mzf', 'rb')
#file_handler = open('C:\\Install\\SharpMZ-80K\\Library\\ExportedMZF\\MAZE.mzf', 'rb')
#file_handler = open('C:\\Install\\SharpMZ-80K\\Library\\ExportedMZF\\MICE.mzf', 'rb')
#file_handler = open('C:\\Install\\SharpMZ-80K\\Library\\ExportedMZF\\MAN MAZE.mzf', 'rb')
#file_handler = open('C:\\Install\\SharpMZ-80K\\Library\\ExportedMZF\\LUDO.mzf', 'rb')
#file_handler = open('C:\\Install\\SharpMZ-80K\\Library\\ExportedMZF\\HORSE RACE.mzf', 'rb')
file_handler = open('C:\\Install\\SharpMZ-80K\\Library\\ExportedMZF\\ANAGRAM.mzf', 'rb')
#file_handler = open('C:\\Users\\Nigel\\Downloads\\OTHELLO-BACK UP.mzf', 'rb')

pdf = FPDF()
pdf.add_page()
colNumber = startCol
rowNumber = startRow
openQuote = 0


#for x in range(0, 128): # Skip the header
dataByte = file_handler.read(128).hex()

while dataByte:
  numberofbytes = int(file_handler.read(1).hex(), base=16) # Length of line
  zero_byte = int(file_handler.read(1).hex(), base=16) # Skip the Zero
  if numberofbytes == 0 and zero_byte == 0: # Double 00 00 bytes == EOF
    break
  PrintKeyWord(str(int(file_handler.read(1).hex(), base=16) + (int(file_handler.read(1).hex(), base=16) * 256)) + ' ',colNumber,rowNumber) # Line number high/low bytes
  # Read each byte in the line
  for x in range(0, numberofbytes - 4):
    dataByte = int(file_handler.read(1).hex(), base=16)

    # Check for open/closing quotes
    if dataByte == 34 and openQuote == 1:
      openQuote = 0
    elif dataByte == 34 and openQuote == 0:
      openQuote = 1

    if dataByte == 13:
      PrintCharacter(32,colNumber,rowNumber) # Replace CR with Space
    # Cursor chars
    elif openQuote == 1 and dataByte == 22: #Clear Screen
      PrintCharacter(15,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 21: #Home
      PrintCharacter(14,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 17: #Cursor Down
      PrintCharacter(10,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 18: #Cursor Up
      PrintCharacter(11,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 20: #Cursor Left
      PrintCharacter(13,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 22: #Cursor Right
      PrintCharacter(12,colNumber,rowNumber)
    # Math symbols
    elif dataByte == 182 and openQuote == 0:
      PrintKeyWord('=',colNumber,rowNumber)
    elif dataByte == 183 and openQuote == 0:
      PrintKeyWord('>',colNumber,rowNumber)
    elif dataByte == 188 and openQuote == 0:
      PrintKeyWord('+',colNumber,rowNumber)
    elif dataByte == 176 and openQuote == 0:
      PrintKeyWord('><',colNumber,rowNumber)
    elif dataByte == 177 and openQuote == 0:
      PrintKeyWord('<>',colNumber,rowNumber)
    elif dataByte == 189 and openQuote == 0:
      PrintKeyWord('-',colNumber,rowNumber)
    elif dataByte == 190 and openQuote == 0:
      PrintKeyWord('*',colNumber,rowNumber)
    elif dataByte == 184 and openQuote == 0:
      PrintKeyWord('<',colNumber,rowNumber)
    elif dataByte == 191 and openQuote == 0:
      PrintKeyWord('/',colNumber,rowNumber) 
    elif dataByte == 181 and openQuote == 0:
      PrintKeyWord('>=',colNumber,rowNumber)
    elif dataByte == 180 and openQuote == 0:
      PrintKeyWord('=>',colNumber,rowNumber)
    elif dataByte == 179 and openQuote == 0:
      PrintKeyWord('<=',colNumber,rowNumber) 
    elif dataByte == 178 and openQuote == 0:
      PrintKeyWord('=<',colNumber,rowNumber)
    elif dataByte == 207 and openQuote == 0:
      PrintCharacter(80,colNumber,rowNumber) # Exp
    elif dataByte == 255 and openQuote == 0: 
      PrintCharacter(96,colNumber,rowNumber) # Pi
    # Lowercase letter mappings
    elif openQuote == 1 and dataByte == 161:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 154:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 159:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 156:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 146:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 170:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 151:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 152:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 166:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 175:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 169:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 184:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 179:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 176:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 183:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 158:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 160:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 157:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 164:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 150:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 165:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 171:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 163:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 155:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1 and dataByte == 189:
      PrintCharacter(dataByte,colNumber,rowNumber) 
    elif openQuote == 1 and dataByte == 162:
      PrintCharacter(dataByte,colNumber,rowNumber)
    elif openQuote == 1:
      PrintCharacter(dataByte,colNumber,rowNumber)
    # Keywords
    elif dataByte == 137:
      PrintKeyWord('GOTO',colNumber,rowNumber)
    elif dataByte == 139:
      PrintKeyWord('GOSUB',colNumber,rowNumber)
    elif dataByte == 136:
      PrintKeyWord('IF',colNumber,rowNumber)
    elif dataByte == 149:
      PrintKeyWord('DIM',colNumber,rowNumber)
    elif dataByte == 131:
      PrintKeyWord('RUN',colNumber,rowNumber)
    elif dataByte == 208:
      PrintKeyWord('RND(',colNumber,rowNumber)
    elif dataByte == 173:
      PrintKeyWord('THEN',colNumber,rowNumber)
    elif dataByte == 133:
      PrintKeyWord('PRINT',colNumber,rowNumber)
    elif dataByte == 128:
      PrintKeyWord('REM',colNumber,rowNumber)
      openQuote = 1 ## Treat REM as a quoted string, ignore keyword byte codes
    elif dataByte == 135:
      PrintKeyWord('FOR',colNumber,rowNumber)
    elif dataByte == 174:
      PrintKeyWord('TO',colNumber,rowNumber)
    elif dataByte == 141:
      PrintKeyWord('NEXT',colNumber,rowNumber)
    elif dataByte == 140:
      PrintKeyWord('RETURN',colNumber,rowNumber)
    elif dataByte == 202:
      PrintKeyWord('SPC(',colNumber,rowNumber)
    elif dataByte == 201:
      PrintKeyWord('TAB(',colNumber,rowNumber)
    elif dataByte == 165:
      PrintKeyWord('GET',colNumber,rowNumber)
    elif dataByte == 175:
      PrintKeyWord('STEP',colNumber,rowNumber)
    elif dataByte == 148:
      PrintKeyWord('POKE',colNumber,rowNumber)
    elif dataByte == 22:
      PrintKeyWord('CLS',colNumber,rowNumber)
    elif dataByte == 152:
      PrintKeyWord('RESTORE',colNumber,rowNumber) 
    elif dataByte == 138:
      PrintKeyWord('READ',colNumber,rowNumber) 
    elif dataByte == 129:
      PrintKeyWord('DATA',colNumber,rowNumber) 
    elif dataByte == 200:
      PrintKeyWord('PEEK(',colNumber,rowNumber)  
    elif dataByte == 214:
      PrintKeyWord('INT(',colNumber,rowNumber) 
    elif dataByte == 197:
      PrintKeyWord('STR$(',colNumber,rowNumber) 
    elif dataByte == 199:
      PrintKeyWord('VAL(',colNumber,rowNumber) 
    elif dataByte == 144:
      PrintKeyWord('ON',colNumber,rowNumber) 
    elif dataByte == 175:
      PrintKeyWord('STEP',colNumber,rowNumber) 
    elif dataByte == 154:
      PrintKeyWord('MUSIC',colNumber,rowNumber) 
    elif dataByte == 155:
      PrintKeyWord('TEMPO',colNumber,rowNumber) 
    elif dataByte == 150:
      PrintKeyWord('DEF FN',colNumber,rowNumber) 
    elif dataByte == 163:
      PrintKeyWord('SET',colNumber,rowNumber) 
    elif dataByte == 164:
      PrintKeyWord('RESET',colNumber,rowNumber) 
    elif dataByte == 157:
      PrintKeyWord('WOPEN',colNumber,rowNumber) 
    elif dataByte == 158:
      PrintKeyWord('ROPEN',colNumber,rowNumber) 
    elif dataByte == 151:
      PrintKeyWord('INPUT',colNumber,rowNumber)       
    elif dataByte == 203:
      PrintKeyWord('SIZE',colNumber,rowNumber)       
    elif dataByte == 142:
      PrintKeyWord('STOP',colNumber,rowNumber)       
    elif dataByte == 143:
      PrintKeyWord('END',colNumber,rowNumber) 
    elif dataByte == 146:
      PrintKeyWord('USR(',colNumber,rowNumber) 
    elif dataByte == 161:
      PrintKeyWord('USR(',colNumber,rowNumber)     
    elif dataByte == 193:
      PrintKeyWord('RIGHT$(',colNumber,rowNumber)   
    elif dataByte == 192:
      PrintKeyWord('LEFT$(',colNumber,rowNumber)   
    elif dataByte == 194:
      PrintKeyWord('MID$(',colNumber,rowNumber)   
    elif dataByte == 195:
      PrintKeyWord('LEN(',colNumber,rowNumber)  
    elif dataByte == 195:
      PrintKeyWord('LEN(',colNumber,rowNumber)  
    elif dataByte == 198:
      PrintKeyWord('ASC(',colNumber,rowNumber)  
    elif dataByte == 196:
      PrintKeyWord('CHR$(',colNumber,rowNumber)  
    elif dataByte == 217:
      PrintKeyWord('ABS(',colNumber,rowNumber) 
    elif dataByte == 218:
      PrintKeyWord('SGN(',colNumber,rowNumber) 
    elif dataByte == 214:
      PrintKeyWord('INT(',colNumber,rowNumber) 
    elif dataByte == 209:
      PrintKeyWord('SIN(',colNumber,rowNumber) 
    elif dataByte == 210:
      PrintKeyWord('COS(',colNumber,rowNumber) 
    elif dataByte == 211:
      PrintKeyWord('TAN(',colNumber,rowNumber) 
    elif dataByte == 212:
      PrintKeyWord('ATN(',colNumber,rowNumber) 
    elif dataByte == 219:
      PrintKeyWord('SQR(',colNumber,rowNumber) 
    elif dataByte == 213:
      PrintKeyWord('EXP(',colNumber,rowNumber) 
    elif dataByte == 215:
      PrintKeyWord('LOG(',colNumber,rowNumber) 
    elif dataByte == 216:
      PrintKeyWord('LN(',colNumber,rowNumber) 
    else:
      PrintCharacter(dataByte,colNumber,rowNumber)
    # Handle line wrap
    if colNumber >= 195:
      colNumber = startCol + lineWrapIndent
      rowNumber = rowNumber + rowSpacing
  

  colNumber = startCol
  rowNumber = rowNumber + rowSpacing
  openQuote = 0
  if rowNumber >= maximumRows:
    pdf.add_page()
    rowNumber = startRow
rowNumber = rowNumber + rowSpacing
PrintKeyWord('*** END OF LISTING ***',colNumber + 60,rowNumber) 
pdf.output('c:\\temp\\hello_world.pdf')

